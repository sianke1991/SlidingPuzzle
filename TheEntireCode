/*The Entire Code 2021-01-10*/
//The 4.5th Project
//sianke1991

final int NUMROW=4;
final int NUMCOL=4;
final int NUMIMAGES=NUMROW*NUMCOL;
PImage[] images=new PImage[NUMIMAGES];
int currentState;
int[][] indices=new int[NUMROW][NUMCOL];
final int NUMMIX=NUMIMAGES*NUMIMAGES*NUMIMAGES*NUMIMAGES;
int blankIndex;
void setup(){
  size(1000,752);
  currentState=0;
  for(int i=0;i<images.length;i++){
    String fileName="image"+str(i/10%10)+str(i%10)+".png";
    images[i]=loadImage(fileName);
  }
}

void draw(){
  
  if(currentState==0){ //state 0
    for(int i=0;i<NUMCOL;i++){
      for(int j=0;j<NUMROW;j++){
        indices[j][i]=NUMCOL*j+i;
      }
    }
    blankIndex=NUMIMAGES-1;
    currentState=1;
  } //state 0
  
  if(currentState==1){ //state 1
    for(int l=0;l<NUMMIX;l++){
      int mixDirection=int(random(4));
      while((blankIndex%NUMCOL==NUMCOL-1 && mixDirection==0) || (blankIndex%NUMCOL==0 && mixDirection==2) || (blankIndex/NUMCOL==NUMROW-1 && mixDirection==1) || (blankIndex/NUMCOL==0 && mixDirection==3)) mixDirection=int(random(4));
      if(mixDirection==0){ //blank moves to the right
        BlankToRight();
      } //blank moves to the right
      else if(mixDirection==1){ //blank moves to the down
        BlankToDown();
      } //blank moves to the down
      else if(mixDirection==2){ //blank moves to the left
        BlankToLeft();
      } //blank moves to the left
      else if(mixDirection==3){ //blank moves to the up
        BlankToUp();
      } //blank moves to the up
    } //l loop
    currentState=10;
  } //state 1
  
  if(currentState==10){ //state 10
    background(191);    
    for(int i=0;i<NUMCOL;i++){
      for(int j=0;j<NUMROW;j++){
        if(indices[j][i]!=NUMIMAGES-1) image(images[indices[j][i]],width/NUMCOL*i,height/NUMROW*j);
      } //j loop
    } //i loop
  
    //for(int i=0;i<images.length;i++){
    //  image(images[i],width/NUMCOL*(i%NUMCOL),height/NUMROW*(i/NUMROW));
    //}
    strokeWeight(5);
    stroke(0);
    for(int i=1;i<NUMCOL;i++) line(width/NUMCOL*i,0,width/NUMCOL*i,height);
    for(int i=1;i<NUMROW;i++) line(0,height/NUMROW*i,width,height/NUMROW*i);
    boolean isPuzzleSolved=true;
    for(int i=0;i<NUMCOL;i++){
      for(int j=0;j<NUMROW;j++){
        isPuzzleSolved=isPuzzleSolved&&(indices[j][i]==NUMCOL*j+i);
      }
    }
    if(isPuzzleSolved) currentState=11;
  } //state 10
  
  if(currentState==11){ //state 11
    for(int i=0;i<NUMCOL;i++){
      for(int j=0;j<NUMROW;j++){
        image(images[indices[j][i]],width/NUMCOL*i,height/NUMROW*j);
      } //j loop
    } //i loop
  } //state 11
  
}

void mousePressed(){
  
  if(currentState==10 && mouseButton==LEFT){ //state 10
    int mouseIndex=MouseIndex();
    if(mouseIndex/NUMCOL==blankIndex/NUMCOL){ //mouse and blank are at the same row
      if(mouseIndex>blankIndex){
        while(mouseIndex!=blankIndex) BlankToRight();
      }
      else if(mouseIndex<blankIndex){
        while(mouseIndex!=blankIndex) BlankToLeft();
      }
    } //mouse and blank are at the same row
    else if(mouseIndex%NUMCOL==blankIndex%NUMCOL){ //mouse and blank are at the same column
      if(mouseIndex>blankIndex){
        while(mouseIndex!=blankIndex) BlankToDown();
      }
      else if(mouseIndex<blankIndex){
        while(mouseIndex!=blankIndex) BlankToUp();
      }
    } //mouse and blank are at the same column
  } //state 10
  else if(currentState==10 && mouseButton==RIGHT) currentState=0;
  else if(currentState==11 && mouseButton==RIGHT) currentState=0;
  
}


int MouseIndex(){
  int colNum=0,rowNum=0;
  if(mouseX>width/NUMCOL*0 && mouseX<width/NUMCOL*1) colNum=0;
  else if(mouseX>width/NUMCOL*1 && mouseX<width/NUMCOL*2) colNum=1;
  else if(mouseX>width/NUMCOL*2 && mouseX<width/NUMCOL*3) colNum=2;
  else if(mouseX>width/NUMCOL*3 && mouseX<width/NUMCOL*4) colNum=3;
  if(mouseY>height/NUMROW*0 && mouseY<height/NUMROW*1) rowNum=0;
  else if(mouseY>height/NUMROW*1 && mouseY<height/NUMROW*2) rowNum=1;
  else if(mouseY>height/NUMROW*2 && mouseY<height/NUMROW*3) rowNum=2;
  else if(mouseY>height/NUMROW*3 && mouseY<height/NUMROW*4) rowNum=3;
  return rowNum*NUMCOL+colNum;
}

void BlankToRight(){
  int m;
  m=indices[blankIndex/NUMCOL][blankIndex%NUMCOL];
  indices[blankIndex/NUMCOL][blankIndex%NUMCOL]=indices[blankIndex/NUMCOL][blankIndex%NUMCOL+1];
  indices[blankIndex/NUMCOL][blankIndex%NUMCOL+1]=m;
  blankIndex+=1;
}

void BlankToDown(){
  int m;
  m=indices[blankIndex/NUMCOL][blankIndex%NUMCOL];
  indices[blankIndex/NUMCOL][blankIndex%NUMCOL]=indices[blankIndex/NUMCOL+1][blankIndex%NUMCOL];
  indices[blankIndex/NUMCOL+1][blankIndex%NUMCOL]=m;
  blankIndex+=NUMCOL;
}

void BlankToLeft(){
  int m;
  m=indices[blankIndex/NUMCOL][blankIndex%NUMCOL];
  indices[blankIndex/NUMCOL][blankIndex%NUMCOL]=indices[blankIndex/NUMCOL][blankIndex%NUMCOL-1];
  indices[blankIndex/NUMCOL][blankIndex%NUMCOL-1]=m;
  blankIndex-=1;
}

void BlankToUp(){
  int m;
  m=indices[blankIndex/NUMCOL][blankIndex%NUMCOL];
  indices[blankIndex/NUMCOL][blankIndex%NUMCOL]=indices[blankIndex/NUMCOL-1][blankIndex%NUMCOL];
  indices[blankIndex/NUMCOL-1][blankIndex%NUMCOL]=m;
  blankIndex-=NUMCOL;
}
